// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// filter_matrix
void filter_matrix(NumericMatrix m, double threshold);
RcppExport SEXP _vite_filter_matrix(SEXP mSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    filter_matrix(m, threshold);
    return R_NilValue;
END_RCPP
}
// filter_matrix_by_rank
void filter_matrix_by_rank(NumericMatrix m, unsigned int threshold);
RcppExport SEXP _vite_filter_matrix_by_rank(SEXP mSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threshold(thresholdSEXP);
    filter_matrix_by_rank(m, threshold);
    return R_NilValue;
END_RCPP
}
// layout_forceatlas2Cpp
void layout_forceatlas2Cpp(NumericMatrix lay, NumericVector F_att_orig, NumericVector mass, NumericVector nodes_size, NumericMatrix edge_list, NumericVector avg_displ, double kgrav, unsigned int iter, bool prevent_overlap, LogicalVector fixed, NumericVector max_displ, float stopping_tolerance, bool barnes_hut);
RcppExport SEXP _vite_layout_forceatlas2Cpp(SEXP laySEXP, SEXP F_att_origSEXP, SEXP massSEXP, SEXP nodes_sizeSEXP, SEXP edge_listSEXP, SEXP avg_displSEXP, SEXP kgravSEXP, SEXP iterSEXP, SEXP prevent_overlapSEXP, SEXP fixedSEXP, SEXP max_displSEXP, SEXP stopping_toleranceSEXP, SEXP barnes_hutSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lay(laySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type F_att_orig(F_att_origSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_size(nodes_sizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type edge_list(edge_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type avg_displ(avg_displSEXP);
    Rcpp::traits::input_parameter< double >::type kgrav(kgravSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type prevent_overlap(prevent_overlapSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_displ(max_displSEXP);
    Rcpp::traits::input_parameter< float >::type stopping_tolerance(stopping_toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type barnes_hut(barnes_hutSEXP);
    layout_forceatlas2Cpp(lay, F_att_orig, mass, nodes_size, edge_list, avg_displ, kgrav, iter, prevent_overlap, fixed, max_displ, stopping_tolerance, barnes_hut);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vite_filter_matrix", (DL_FUNC) &_vite_filter_matrix, 2},
    {"_vite_filter_matrix_by_rank", (DL_FUNC) &_vite_filter_matrix_by_rank, 2},
    {"_vite_layout_forceatlas2Cpp", (DL_FUNC) &_vite_layout_forceatlas2Cpp, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_vite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
